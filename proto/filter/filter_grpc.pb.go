// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: proto/filter/filter.proto

package filter

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FilterServiceClient is the client API for FilterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FilterServiceClient interface {
	InsertItem(ctx context.Context, in *InsertItemRequest, opts ...grpc.CallOption) (*InsertItemResponse, error)
	GetMaxItem(ctx context.Context, in *GetMaxItemRequest, opts ...grpc.CallOption) (*GetMaxItemResponse, error)
	GetMinItem(ctx context.Context, in *GetMinItemRequest, opts ...grpc.CallOption) (*GetMinItemResponse, error)
	RemoveMaxItem(ctx context.Context, in *RemoveMaxItemRequest, opts ...grpc.CallOption) (*RemoveMaxItemResponse, error)
	RemoveMinItem(ctx context.Context, in *RemoveMinItemRequest, opts ...grpc.CallOption) (*RemoveMinItemResponse, error)
	GetSize(ctx context.Context, in *GetSizeRequest, opts ...grpc.CallOption) (*GetSizeResponse, error)
	Clear(ctx context.Context, in *ClearRequest, opts ...grpc.CallOption) (*ClearResponse, error)
}

type filterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFilterServiceClient(cc grpc.ClientConnInterface) FilterServiceClient {
	return &filterServiceClient{cc}
}

func (c *filterServiceClient) InsertItem(ctx context.Context, in *InsertItemRequest, opts ...grpc.CallOption) (*InsertItemResponse, error) {
	out := new(InsertItemResponse)
	err := c.cc.Invoke(ctx, "/filter.FilterService/InsertItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filterServiceClient) GetMaxItem(ctx context.Context, in *GetMaxItemRequest, opts ...grpc.CallOption) (*GetMaxItemResponse, error) {
	out := new(GetMaxItemResponse)
	err := c.cc.Invoke(ctx, "/filter.FilterService/GetMaxItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filterServiceClient) GetMinItem(ctx context.Context, in *GetMinItemRequest, opts ...grpc.CallOption) (*GetMinItemResponse, error) {
	out := new(GetMinItemResponse)
	err := c.cc.Invoke(ctx, "/filter.FilterService/GetMinItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filterServiceClient) RemoveMaxItem(ctx context.Context, in *RemoveMaxItemRequest, opts ...grpc.CallOption) (*RemoveMaxItemResponse, error) {
	out := new(RemoveMaxItemResponse)
	err := c.cc.Invoke(ctx, "/filter.FilterService/RemoveMaxItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filterServiceClient) RemoveMinItem(ctx context.Context, in *RemoveMinItemRequest, opts ...grpc.CallOption) (*RemoveMinItemResponse, error) {
	out := new(RemoveMinItemResponse)
	err := c.cc.Invoke(ctx, "/filter.FilterService/RemoveMinItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filterServiceClient) GetSize(ctx context.Context, in *GetSizeRequest, opts ...grpc.CallOption) (*GetSizeResponse, error) {
	out := new(GetSizeResponse)
	err := c.cc.Invoke(ctx, "/filter.FilterService/GetSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filterServiceClient) Clear(ctx context.Context, in *ClearRequest, opts ...grpc.CallOption) (*ClearResponse, error) {
	out := new(ClearResponse)
	err := c.cc.Invoke(ctx, "/filter.FilterService/Clear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FilterServiceServer is the server API for FilterService service.
// All implementations must embed UnimplementedFilterServiceServer
// for forward compatibility
type FilterServiceServer interface {
	InsertItem(context.Context, *InsertItemRequest) (*InsertItemResponse, error)
	GetMaxItem(context.Context, *GetMaxItemRequest) (*GetMaxItemResponse, error)
	GetMinItem(context.Context, *GetMinItemRequest) (*GetMinItemResponse, error)
	RemoveMaxItem(context.Context, *RemoveMaxItemRequest) (*RemoveMaxItemResponse, error)
	RemoveMinItem(context.Context, *RemoveMinItemRequest) (*RemoveMinItemResponse, error)
	GetSize(context.Context, *GetSizeRequest) (*GetSizeResponse, error)
	Clear(context.Context, *ClearRequest) (*ClearResponse, error)
	mustEmbedUnimplementedFilterServiceServer()
}

// UnimplementedFilterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFilterServiceServer struct {
}

func (UnimplementedFilterServiceServer) InsertItem(context.Context, *InsertItemRequest) (*InsertItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertItem not implemented")
}
func (UnimplementedFilterServiceServer) GetMaxItem(context.Context, *GetMaxItemRequest) (*GetMaxItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMaxItem not implemented")
}
func (UnimplementedFilterServiceServer) GetMinItem(context.Context, *GetMinItemRequest) (*GetMinItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMinItem not implemented")
}
func (UnimplementedFilterServiceServer) RemoveMaxItem(context.Context, *RemoveMaxItemRequest) (*RemoveMaxItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMaxItem not implemented")
}
func (UnimplementedFilterServiceServer) RemoveMinItem(context.Context, *RemoveMinItemRequest) (*RemoveMinItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMinItem not implemented")
}
func (UnimplementedFilterServiceServer) GetSize(context.Context, *GetSizeRequest) (*GetSizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSize not implemented")
}
func (UnimplementedFilterServiceServer) Clear(context.Context, *ClearRequest) (*ClearResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Clear not implemented")
}
func (UnimplementedFilterServiceServer) mustEmbedUnimplementedFilterServiceServer() {}

// UnsafeFilterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FilterServiceServer will
// result in compilation errors.
type UnsafeFilterServiceServer interface {
	mustEmbedUnimplementedFilterServiceServer()
}

func RegisterFilterServiceServer(s grpc.ServiceRegistrar, srv FilterServiceServer) {
	s.RegisterService(&FilterService_ServiceDesc, srv)
}

func _FilterService_InsertItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilterServiceServer).InsertItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filter.FilterService/InsertItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilterServiceServer).InsertItem(ctx, req.(*InsertItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilterService_GetMaxItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMaxItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilterServiceServer).GetMaxItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filter.FilterService/GetMaxItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilterServiceServer).GetMaxItem(ctx, req.(*GetMaxItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilterService_GetMinItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMinItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilterServiceServer).GetMinItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filter.FilterService/GetMinItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilterServiceServer).GetMinItem(ctx, req.(*GetMinItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilterService_RemoveMaxItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMaxItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilterServiceServer).RemoveMaxItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filter.FilterService/RemoveMaxItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilterServiceServer).RemoveMaxItem(ctx, req.(*RemoveMaxItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilterService_RemoveMinItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMinItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilterServiceServer).RemoveMinItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filter.FilterService/RemoveMinItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilterServiceServer).RemoveMinItem(ctx, req.(*RemoveMinItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilterService_GetSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilterServiceServer).GetSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filter.FilterService/GetSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilterServiceServer).GetSize(ctx, req.(*GetSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilterService_Clear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilterServiceServer).Clear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filter.FilterService/Clear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilterServiceServer).Clear(ctx, req.(*ClearRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FilterService_ServiceDesc is the grpc.ServiceDesc for FilterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FilterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "filter.FilterService",
	HandlerType: (*FilterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertItem",
			Handler:    _FilterService_InsertItem_Handler,
		},
		{
			MethodName: "GetMaxItem",
			Handler:    _FilterService_GetMaxItem_Handler,
		},
		{
			MethodName: "GetMinItem",
			Handler:    _FilterService_GetMinItem_Handler,
		},
		{
			MethodName: "RemoveMaxItem",
			Handler:    _FilterService_RemoveMaxItem_Handler,
		},
		{
			MethodName: "RemoveMinItem",
			Handler:    _FilterService_RemoveMinItem_Handler,
		},
		{
			MethodName: "GetSize",
			Handler:    _FilterService_GetSize_Handler,
		},
		{
			MethodName: "Clear",
			Handler:    _FilterService_Clear_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/filter/filter.proto",
}
